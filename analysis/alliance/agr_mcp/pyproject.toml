[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agr-mcp-server"
version = "0.1.0"
description = "MCP server for Alliance of Genome Resources data access"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Alliance of Genome Resources", email = "help@alliancegenome.org"}
]
maintainers = [
    {name = "AGR Development Team", email = "dev@alliancegenome.org"}
]
keywords = [
    "mcp",
    "model-context-protocol",
    "alliance",
    "genomics",
    "bioinformatics",
    "api"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

dependencies = [
    "mcp>=0.1.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "cachetools>=5.3.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "jsonschema>=4.17.0",
    "aiofiles>=23.0.0",
    "backoff>=2.2.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "types-cachetools>=5.3.0",
    "types-jsonschema>=4.17.0",
    "types-aiofiles>=23.0.0",
    "httpx-mock>=0.2.0"
]

docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.23.0",
    "myst-parser>=1.0.0"
]

[project.urls]
Homepage = "https://www.alliancegenome.org"
Documentation = "https://agr-mcp-server.readthedocs.io"
Repository = "https://github.com/alliance-genome/agr-mcp-server"
Issues = "https://github.com/alliance-genome/agr-mcp-server/issues"
Changelog = "https://github.com/alliance-genome/agr-mcp-server/blob/main/CHANGELOG.md"

[project.scripts]
agr-mcp = "agr_mcp.server:main"

[tool.setuptools]
packages = ["agr_mcp"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
agr_mcp = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["agr_mcp"]
skip_gitignore = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=agr_mcp",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/agr_mcp"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
