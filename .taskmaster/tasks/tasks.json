{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement get_supported_species Tool Core Functionality",
        "description": "Create the metadata_tools.py module with Species data model and get_supported_species tool function",
        "details": "Create src/agr_mcp/tools/metadata_tools.py file. Define Pydantic BaseModel 'Species' with fields: taxon_id (alias 'taxonId'), scientific_name (alias 'name'), and display_name (alias 'displayName'). Implement async function get_supported_species() that makes GET request to https://www.alliancegenome.org/api/species/list using httpx.AsyncClient, parses JSON response into list[Species], handles HTTP errors appropriately. Decorate function with @tool decorator specifying name and description.",
        "testStrategy": "Create unit tests in tests/tools/test_metadata_tools.py using pytest and pytest-mock. Mock httpx.AsyncClient.get to return sample species data. Verify function returns correct list of Species objects with proper field mapping.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create metadata_tools.py module and Species data model",
            "description": "Create the src/agr_mcp/tools/metadata_tools.py file and implement the Species Pydantic model with proper field aliases",
            "dependencies": [],
            "details": "Create the file src/agr_mcp/tools/metadata_tools.py. Import necessary modules (pydantic BaseModel, Field). Define Species class inheriting from BaseModel with three fields: taxon_id (with alias 'taxonId'), scientific_name (with alias 'name'), and display_name (with alias 'displayName'). Use proper type hints and Field aliases for JSON mapping.",
            "status": "pending",
            "testStrategy": "Unit tests for Species model instantiation and serialization with aliased fields"
          },
          {
            "id": 2,
            "title": "Implement basic get_supported_species function structure",
            "description": "Create the async get_supported_species function with proper imports and basic structure",
            "dependencies": [
              1
            ],
            "details": "Import httpx, @tool decorator, and other required modules. Define async function get_supported_species() with @tool decorator specifying name='get_supported_species' and appropriate description. Set up basic function signature returning list[Species]. Add docstring explaining the function purpose.",
            "status": "pending",
            "testStrategy": "Test function decorator and signature validation"
          },
          {
            "id": 3,
            "title": "Implement HTTP request logic with httpx",
            "description": "Add the HTTP request functionality to fetch species data from Alliance API",
            "dependencies": [
              2
            ],
            "details": "Inside get_supported_species function, create httpx.AsyncClient context manager. Make GET request to 'https://www.alliancegenome.org/api/species/list'. Handle response.raise_for_status() for HTTP error checking. Parse JSON response using response.json().",
            "status": "pending",
            "testStrategy": "Mock HTTP requests to test API interaction and error handling"
          },
          {
            "id": 4,
            "title": "Implement response parsing and error handling",
            "description": "Complete the function by parsing JSON response into Species objects and adding comprehensive error handling",
            "dependencies": [
              3
            ],
            "details": "Parse the JSON response into list[Species] by iterating through response data and creating Species instances. Add try-catch blocks for HTTP errors, JSON parsing errors, and validation errors. Return the list of Species objects. Ensure proper exception handling with meaningful error messages.",
            "status": "pending",
            "testStrategy": "Test with various response scenarios including successful responses, HTTP errors, malformed JSON, and invalid species data"
          }
        ]
      },
      {
        "id": 2,
        "title": "Register Tool and Update Documentation",
        "description": "Integrate the new tool into the MCP server and update project documentation",
        "details": "In src/agr_mcp/server.py, add import statement for get_supported_species from agr_mcp.tools.metadata_tools. Register the tool by adding server.register(get_supported_species) call within the create_server() function. Update README.md to include get_supported_species in the 'Available Tools' section with brief description of its functionality.",
        "testStrategy": "Verify tool is properly registered by testing MCP server startup and tool availability. Confirm documentation accurately reflects the new tool's purpose and usage.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Import and register get_supported_species tool in MCP server",
            "description": "Add the import statement and register the new tool in the server configuration",
            "dependencies": [],
            "details": "In src/agr_mcp/server.py: 1) Add 'from agr_mcp.tools.metadata_tools import get_supported_species' to the import section at the top of the file. 2) Locate the create_server() function and add 'server.register(get_supported_species)' call within the function to register the tool with the MCP server.",
            "status": "pending",
            "testStrategy": "Verify the server starts without import errors and the tool is accessible via MCP client"
          },
          {
            "id": 2,
            "title": "Update README.md with new tool documentation",
            "description": "Add get_supported_species to the Available Tools section with description",
            "dependencies": [
              1
            ],
            "details": "In README.md: 1) Locate the 'Available Tools' section. 2) Add a new entry for 'get_supported_species' with a brief description such as 'Retrieves list of supported species from Alliance API with their names and taxonomic IDs'. 3) Ensure the formatting matches existing tool entries in the documentation.",
            "status": "pending",
            "testStrategy": "Review README.md to ensure the new tool entry is properly formatted and provides clear information to users"
          },
          {
            "id": 3,
            "title": "Test integration and validate tool availability",
            "description": "Verify the tool is properly integrated and accessible through the MCP server",
            "dependencies": [
              1,
              2
            ],
            "details": "1) Start the MCP server and verify no errors occur during startup. 2) Test that the get_supported_species tool can be called successfully through the MCP interface. 3) Verify the tool returns expected species data from the Alliance API. 4) Check that the tool appears in any tool listing or discovery mechanisms.",
            "status": "pending",
            "testStrategy": "Manual testing of MCP server startup and tool invocation, plus verification that the tool responds with valid species data"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-21T22:40:58.616Z",
      "updated": "2025-06-29T16:01:11.440Z",
      "description": "Tasks for master context"
    }
  }
}
